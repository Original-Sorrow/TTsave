import os, re, configparser, requests
import urllib
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.utils import executor
from aiogram.utils.helper import Helper, HelperMode, ListItem
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton,ContentType
from tiktok import getCookie, getDownloadUrl, getDownloadID, getStatus 
from db.date import new_user,stata,to_all
import urllib.request

ADMINS=['ID']
TOKEN = '–¢–û–ö–ï–ù' 

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

class State_t(StatesGroup):
    send_all=State()

def download_video(video_url, name):
    r = requests.get(video_url, allow_redirects=True)
    content_type = r.headers.get('content-type')
    if content_type == 'video/mp4':
        open(f'./videos/video{name}.mp4', 'wb').write(r.content)
    else:
        pass
 
if not os.path.exists('videos'):
    os.makedirs('videos')


@dp.message_handler(content_types=ContentType.all(),state=State_t.send_all)
async def sending_all(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['all'] = message.text
    if data['all'] == '–û—Ç–º–µ–Ω–∞':
        await message.answer('<em>–û—Ç–º–µ–Ω–∞..</em>',parse_mode='html')
        await state.finish()
    else:
        await state.finish()
        nus = await to_all(message,InlineKeyboardMarkup().add(InlineKeyboardButton('‚ùå –ó–∞–∫—Ä—ã—Ç—å',callback_data='mes_del')))
        await bot.send_message(message.chat.id,f'<b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {nus} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º</b>',parse_mode='html')
        
@dp.callback_query_handler(lambda c: c.data == 'mes_del')
async def delete(call):
    await call.message.delete()

@dp.message_handler(commands=['rsl'])
async def do_send(message):
    if message.from_user.id in ADMINS:
        await message.answer('<b>–í–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ —è –≤—Å–µ–º –æ—Ç–ø—Ä–∞–≤–ª—é\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—Å–∞—Ç—å <code>–û—Ç–º–µ–Ω–∞</code></b>',parse_mode='html')
        await State_t.send_all.set()

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    new_user(message.from_user.id)
    user = await bot.get_chat_member(ID–∫–∞–Ω–∞–ª–∞,message.from_user.id)
    if user['status']=='left':
        await message.answer('<b>‚ö†Ô∏è–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª @–≤–∞—à–∫–∞–Ω–∞–ª\n\nüîí–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start</b>',parse_mode='html')
    else:
        await bot.send_message(chat_id=message.chat.id, text=' –ü—Ä–∏–≤–µ—Ç, —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å TikTok, –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ:') 
 

 
 
@dp.message_handler(commands=['users'])
async def stat(message: types.Message):
    num = stata()
    await message.answer(f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: <code>{num}</code></b>',parse_mode='html')

@dp.message_handler(content_types=['text'])
async def text(message: types.Message):
    if message.text.startswith('https://www.tiktok.com'):
        video_url = message.text
        cookie = getCookie()
        status = getStatus(video_url,cookie)
        if status == False:
            await bot.send_message(chat_id=message.chat.id, text='–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞, –≤–∏–¥–µ–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ —è –µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª.')
        else:
            await bot.send_message(chat_id=message.chat.id, text='–°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ')
            url = getDownloadUrl(video_url, cookie)
            video_id = getDownloadID(video_url, cookie)
            download_video(url, video_id)
            path = f'./videos/video{video_id}.mp4'
            with open(f'./videos/video{video_id}.mp4', 'rb') as file:
                await bot.send_video(
                    chat_id=message.chat.id,
                    video=file,
                    caption='–î–µ—Ä–∂–∏ —Ä–æ–ª–∏–∫'
                    )
            os.remove(path)
    elif message.text.startswith('https://vm.tiktok.com'):
        video_url = message.text
        req = urllib.request.Request(
            video_url,
            data=None,
            headers={
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36'
            } 
                    )
        url_v = urllib.request.urlopen(req).geturl()
        if url_v == 'https://www.tiktok.com/':
            await bot.send_message(chat_id=message.chat.id, text='–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞, –≤–∏–¥–µ–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ —è –µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª.')
        else:
            cookie = getCookie()
            await bot.send_message(chat_id=message.chat.id, text='–°–∫–∞—á–∏–≤–∞—é...')
            url = getDownloadUrl(url_v, cookie)
            video_id = getDownloadID(url_v, cookie)
            download_video(url, video_id)
            path = f'./videos/video{video_id}.mp4'
            with open(f'./videos/video{video_id}.mp4', 'rb') as file:
                await bot.send_video(
                    chat_id=message.chat.id,
                    video=file,
                    caption='–î–µ—Ä–∂–∏ —Ä–æ–ª–∏–∫'
                    ) 
            os.remove(path)
    else:
        await bot.send_message(chat_id=message.chat.id, text='–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ TikTok.')

if __name__ == "__main__":
    
    executor.start_polling(dp, skip_updates=True)
